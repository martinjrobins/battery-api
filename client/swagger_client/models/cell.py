# coding: utf-8

"""
    Battery Data API

    A standard API for accessing battery experiment datasets and metadata  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: martin.robinson@cs.ox.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'manufacturer': 'str',
        'form_factor': 'str',
        'datasheet': 'str',
        'anode_chemistry': 'str',
        'cathode_chemistry': 'str',
        'nominal_capacity': 'float',
        'nominal_cell_weight': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'manufacturer': 'manufacturer',
        'form_factor': 'form_factor',
        'datasheet': 'datasheet',
        'anode_chemistry': 'anode_chemistry',
        'cathode_chemistry': 'cathode_chemistry',
        'nominal_capacity': 'nominal_capacity',
        'nominal_cell_weight': 'nominal_cell_weight'
    }

    def __init__(self, id=None, name=None, manufacturer=None, form_factor=None, datasheet=None, anode_chemistry=None, cathode_chemistry=None, nominal_capacity=None, nominal_cell_weight=None):  # noqa: E501
        """Cell - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._manufacturer = None
        self._form_factor = None
        self._datasheet = None
        self._anode_chemistry = None
        self._cathode_chemistry = None
        self._nominal_capacity = None
        self._nominal_cell_weight = None
        self.discriminator = None
        self.id = id
        self.name = name
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if form_factor is not None:
            self.form_factor = form_factor
        if datasheet is not None:
            self.datasheet = datasheet
        if anode_chemistry is not None:
            self.anode_chemistry = anode_chemistry
        if cathode_chemistry is not None:
            self.cathode_chemistry = cathode_chemistry
        if nominal_capacity is not None:
            self.nominal_capacity = nominal_capacity
        if nominal_cell_weight is not None:
            self.nominal_cell_weight = nominal_cell_weight

    @property
    def id(self):
        """Gets the id of this Cell.  # noqa: E501


        :return: The id of this Cell.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cell.


        :param id: The id of this Cell.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Cell.  # noqa: E501


        :return: The name of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cell.


        :param name: The name of this Cell.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Cell.  # noqa: E501


        :return: The manufacturer of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Cell.


        :param manufacturer: The manufacturer of this Cell.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def form_factor(self):
        """Gets the form_factor of this Cell.  # noqa: E501


        :return: The form_factor of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this Cell.


        :param form_factor: The form_factor of this Cell.  # noqa: E501
        :type: str
        """

        self._form_factor = form_factor

    @property
    def datasheet(self):
        """Gets the datasheet of this Cell.  # noqa: E501


        :return: The datasheet of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._datasheet

    @datasheet.setter
    def datasheet(self, datasheet):
        """Sets the datasheet of this Cell.


        :param datasheet: The datasheet of this Cell.  # noqa: E501
        :type: str
        """

        self._datasheet = datasheet

    @property
    def anode_chemistry(self):
        """Gets the anode_chemistry of this Cell.  # noqa: E501


        :return: The anode_chemistry of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._anode_chemistry

    @anode_chemistry.setter
    def anode_chemistry(self, anode_chemistry):
        """Sets the anode_chemistry of this Cell.


        :param anode_chemistry: The anode_chemistry of this Cell.  # noqa: E501
        :type: str
        """

        self._anode_chemistry = anode_chemistry

    @property
    def cathode_chemistry(self):
        """Gets the cathode_chemistry of this Cell.  # noqa: E501


        :return: The cathode_chemistry of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._cathode_chemistry

    @cathode_chemistry.setter
    def cathode_chemistry(self, cathode_chemistry):
        """Sets the cathode_chemistry of this Cell.


        :param cathode_chemistry: The cathode_chemistry of this Cell.  # noqa: E501
        :type: str
        """

        self._cathode_chemistry = cathode_chemistry

    @property
    def nominal_capacity(self):
        """Gets the nominal_capacity of this Cell.  # noqa: E501

        in what units?  # noqa: E501

        :return: The nominal_capacity of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._nominal_capacity

    @nominal_capacity.setter
    def nominal_capacity(self, nominal_capacity):
        """Sets the nominal_capacity of this Cell.

        in what units?  # noqa: E501

        :param nominal_capacity: The nominal_capacity of this Cell.  # noqa: E501
        :type: float
        """

        self._nominal_capacity = nominal_capacity

    @property
    def nominal_cell_weight(self):
        """Gets the nominal_cell_weight of this Cell.  # noqa: E501

        in what units?  # noqa: E501

        :return: The nominal_cell_weight of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._nominal_cell_weight

    @nominal_cell_weight.setter
    def nominal_cell_weight(self, nominal_cell_weight):
        """Sets the nominal_cell_weight of this Cell.

        in what units?  # noqa: E501

        :param nominal_cell_weight: The nominal_cell_weight of this Cell.  # noqa: E501
        :type: float
        """

        self._nominal_cell_weight = nominal_cell_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
