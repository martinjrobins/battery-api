# coding: utf-8

"""
    Battery Data API

    A standard API for accessing battery experiment datasets and metadata  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: martin.robinson@cs.ox.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        '_date': 'datetime',
        'purpose': 'str',
        'columns': 'list[Column]',
        'cell': 'Cell',
        'owner': 'User',
        'equipment': 'list[Equipment]',
        'ranges': 'list[Range]',
        'json_data': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        '_date': 'date',
        'purpose': 'purpose',
        'columns': 'columns',
        'cell': 'cell',
        'owner': 'owner',
        'equipment': 'equipment',
        'ranges': 'ranges',
        'json_data': 'json_data'
    }

    def __init__(self, id=None, name=None, _date=None, purpose=None, columns=None, cell=None, owner=None, equipment=None, ranges=None, json_data=None):  # noqa: E501
        """Dataset - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self.__date = None
        self._purpose = None
        self._columns = None
        self._cell = None
        self._owner = None
        self._equipment = None
        self._ranges = None
        self._json_data = None
        self.discriminator = None
        self.id = id
        self.name = name
        self._date = _date
        if purpose is not None:
            self.purpose = purpose
        if columns is not None:
            self.columns = columns
        if cell is not None:
            self.cell = cell
        if owner is not None:
            self.owner = owner
        if equipment is not None:
            self.equipment = equipment
        if ranges is not None:
            self.ranges = ranges
        if json_data is not None:
            self.json_data = json_data

    @property
    def id(self):
        """Gets the id of this Dataset.  # noqa: E501


        :return: The id of this Dataset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Dataset.  # noqa: E501


        :return: The name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.


        :param name: The name of this Dataset.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def _date(self):
        """Gets the _date of this Dataset.  # noqa: E501


        :return: The _date of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Dataset.


        :param _date: The _date of this Dataset.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def purpose(self):
        """Gets the purpose of this Dataset.  # noqa: E501


        :return: The purpose of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this Dataset.


        :param purpose: The purpose of this Dataset.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def columns(self):
        """Gets the columns of this Dataset.  # noqa: E501


        :return: The columns of this Dataset.  # noqa: E501
        :rtype: list[Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Dataset.


        :param columns: The columns of this Dataset.  # noqa: E501
        :type: list[Column]
        """

        self._columns = columns

    @property
    def cell(self):
        """Gets the cell of this Dataset.  # noqa: E501


        :return: The cell of this Dataset.  # noqa: E501
        :rtype: Cell
        """
        return self._cell

    @cell.setter
    def cell(self, cell):
        """Sets the cell of this Dataset.


        :param cell: The cell of this Dataset.  # noqa: E501
        :type: Cell
        """

        self._cell = cell

    @property
    def owner(self):
        """Gets the owner of this Dataset.  # noqa: E501


        :return: The owner of this Dataset.  # noqa: E501
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Dataset.


        :param owner: The owner of this Dataset.  # noqa: E501
        :type: User
        """

        self._owner = owner

    @property
    def equipment(self):
        """Gets the equipment of this Dataset.  # noqa: E501


        :return: The equipment of this Dataset.  # noqa: E501
        :rtype: list[Equipment]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this Dataset.


        :param equipment: The equipment of this Dataset.  # noqa: E501
        :type: list[Equipment]
        """

        self._equipment = equipment

    @property
    def ranges(self):
        """Gets the ranges of this Dataset.  # noqa: E501


        :return: The ranges of this Dataset.  # noqa: E501
        :rtype: list[Range]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this Dataset.


        :param ranges: The ranges of this Dataset.  # noqa: E501
        :type: list[Range]
        """

        self._ranges = ranges

    @property
    def json_data(self):
        """Gets the json_data of this Dataset.  # noqa: E501


        :return: The json_data of this Dataset.  # noqa: E501
        :rtype: object
        """
        return self._json_data

    @json_data.setter
    def json_data(self, json_data):
        """Sets the json_data of this Dataset.


        :param json_data: The json_data of this Dataset.  # noqa: E501
        :type: object
        """

        self._json_data = json_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
