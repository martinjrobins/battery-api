# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.cell import Cell  # noqa: F401,E501
from swagger_server.models.column import Column  # noqa: F401,E501
from swagger_server.models.equipment import Equipment  # noqa: F401,E501
from swagger_server.models.range import Range  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class Dataset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, _date: datetime=None, purpose: str=None, columns: List[Column]=None, cell: Cell=None, owner: User=None, equipment: List[Equipment]=None, ranges: List[Range]=None, json_data: object=None):  # noqa: E501
        """Dataset - a model defined in Swagger

        :param id: The id of this Dataset.  # noqa: E501
        :type id: int
        :param name: The name of this Dataset.  # noqa: E501
        :type name: str
        :param _date: The _date of this Dataset.  # noqa: E501
        :type _date: datetime
        :param purpose: The purpose of this Dataset.  # noqa: E501
        :type purpose: str
        :param columns: The columns of this Dataset.  # noqa: E501
        :type columns: List[Column]
        :param cell: The cell of this Dataset.  # noqa: E501
        :type cell: Cell
        :param owner: The owner of this Dataset.  # noqa: E501
        :type owner: User
        :param equipment: The equipment of this Dataset.  # noqa: E501
        :type equipment: List[Equipment]
        :param ranges: The ranges of this Dataset.  # noqa: E501
        :type ranges: List[Range]
        :param json_data: The json_data of this Dataset.  # noqa: E501
        :type json_data: object
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            '_date': datetime,
            'purpose': str,
            'columns': List[Column],
            'cell': Cell,
            'owner': User,
            'equipment': List[Equipment],
            'ranges': List[Range],
            'json_data': object
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            '_date': 'date',
            'purpose': 'purpose',
            'columns': 'columns',
            'cell': 'cell',
            'owner': 'owner',
            'equipment': 'equipment',
            'ranges': 'ranges',
            'json_data': 'json_data'
        }
        self._id = id
        self._name = name
        self.__date = _date
        self._purpose = purpose
        self._columns = columns
        self._cell = cell
        self._owner = owner
        self._equipment = equipment
        self._ranges = ranges
        self._json_data = json_data

    @classmethod
    def from_dict(cls, dikt) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dataset of this Dataset.  # noqa: E501
        :rtype: Dataset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Dataset.


        :return: The id of this Dataset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Dataset.


        :return: The name of this Dataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Dataset.


        :param name: The name of this Dataset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def _date(self) -> datetime:
        """Gets the _date of this Dataset.


        :return: The _date of this Dataset.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this Dataset.


        :param _date: The _date of this Dataset.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def purpose(self) -> str:
        """Gets the purpose of this Dataset.


        :return: The purpose of this Dataset.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: str):
        """Sets the purpose of this Dataset.


        :param purpose: The purpose of this Dataset.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def columns(self) -> List[Column]:
        """Gets the columns of this Dataset.


        :return: The columns of this Dataset.
        :rtype: List[Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns: List[Column]):
        """Sets the columns of this Dataset.


        :param columns: The columns of this Dataset.
        :type columns: List[Column]
        """

        self._columns = columns

    @property
    def cell(self) -> Cell:
        """Gets the cell of this Dataset.


        :return: The cell of this Dataset.
        :rtype: Cell
        """
        return self._cell

    @cell.setter
    def cell(self, cell: Cell):
        """Sets the cell of this Dataset.


        :param cell: The cell of this Dataset.
        :type cell: Cell
        """

        self._cell = cell

    @property
    def owner(self) -> User:
        """Gets the owner of this Dataset.


        :return: The owner of this Dataset.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner: User):
        """Sets the owner of this Dataset.


        :param owner: The owner of this Dataset.
        :type owner: User
        """

        self._owner = owner

    @property
    def equipment(self) -> List[Equipment]:
        """Gets the equipment of this Dataset.


        :return: The equipment of this Dataset.
        :rtype: List[Equipment]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment: List[Equipment]):
        """Sets the equipment of this Dataset.


        :param equipment: The equipment of this Dataset.
        :type equipment: List[Equipment]
        """

        self._equipment = equipment

    @property
    def ranges(self) -> List[Range]:
        """Gets the ranges of this Dataset.


        :return: The ranges of this Dataset.
        :rtype: List[Range]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges: List[Range]):
        """Sets the ranges of this Dataset.


        :param ranges: The ranges of this Dataset.
        :type ranges: List[Range]
        """

        self._ranges = ranges

    @property
    def json_data(self) -> object:
        """Gets the json_data of this Dataset.


        :return: The json_data of this Dataset.
        :rtype: object
        """
        return self._json_data

    @json_data.setter
    def json_data(self, json_data: object):
        """Sets the json_data of this Dataset.


        :param json_data: The json_data of this Dataset.
        :type json_data: object
        """

        self._json_data = json_data
