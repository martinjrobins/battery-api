# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Range(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, label_name: str=None, lower_bound: int=None, upper_bound: int=None, info: str=None):  # noqa: E501
        """Range - a model defined in Swagger

        :param id: The id of this Range.  # noqa: E501
        :type id: int
        :param label_name: The label_name of this Range.  # noqa: E501
        :type label_name: str
        :param lower_bound: The lower_bound of this Range.  # noqa: E501
        :type lower_bound: int
        :param upper_bound: The upper_bound of this Range.  # noqa: E501
        :type upper_bound: int
        :param info: The info of this Range.  # noqa: E501
        :type info: str
        """
        self.swagger_types = {
            'id': int,
            'label_name': str,
            'lower_bound': int,
            'upper_bound': int,
            'info': str
        }

        self.attribute_map = {
            'id': 'id',
            'label_name': 'label_name',
            'lower_bound': 'lower_bound',
            'upper_bound': 'upper_bound',
            'info': 'info'
        }
        self._id = id
        self._label_name = label_name
        self._lower_bound = lower_bound
        self._upper_bound = upper_bound
        self._info = info

    @classmethod
    def from_dict(cls, dikt) -> 'Range':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Range of this Range.  # noqa: E501
        :rtype: Range
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Range.


        :return: The id of this Range.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Range.


        :param id: The id of this Range.
        :type id: int
        """

        self._id = id

    @property
    def label_name(self) -> str:
        """Gets the label_name of this Range.


        :return: The label_name of this Range.
        :rtype: str
        """
        return self._label_name

    @label_name.setter
    def label_name(self, label_name: str):
        """Sets the label_name of this Range.


        :param label_name: The label_name of this Range.
        :type label_name: str
        """
        if label_name is None:
            raise ValueError("Invalid value for `label_name`, must not be `None`")  # noqa: E501

        self._label_name = label_name

    @property
    def lower_bound(self) -> int:
        """Gets the lower_bound of this Range.


        :return: The lower_bound of this Range.
        :rtype: int
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound: int):
        """Sets the lower_bound of this Range.


        :param lower_bound: The lower_bound of this Range.
        :type lower_bound: int
        """
        if lower_bound is None:
            raise ValueError("Invalid value for `lower_bound`, must not be `None`")  # noqa: E501

        self._lower_bound = lower_bound

    @property
    def upper_bound(self) -> int:
        """Gets the upper_bound of this Range.


        :return: The upper_bound of this Range.
        :rtype: int
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound: int):
        """Sets the upper_bound of this Range.


        :param upper_bound: The upper_bound of this Range.
        :type upper_bound: int
        """
        if upper_bound is None:
            raise ValueError("Invalid value for `upper_bound`, must not be `None`")  # noqa: E501

        self._upper_bound = upper_bound

    @property
    def info(self) -> str:
        """Gets the info of this Range.


        :return: The info of this Range.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """Sets the info of this Range.


        :param info: The info of this Range.
        :type info: str
        """

        self._info = info
